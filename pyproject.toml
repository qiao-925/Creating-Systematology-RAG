[project]
name = "creating-systematology-rag"
version = "0.1.0"
description = "基于LlamaIndex的系统科学知识库RAG应用"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "llama-index>=0.14.3",
    "llama-index-llms-openai>=0.2.0",
    "llama-index-llms-deepseek>=0.2.0",
    "llama-index-embeddings-huggingface>=0.3.0",
    "llama-index-vector-stores-chroma>=0.2.0",
    "llama-index-readers-file>=0.2.0",
    "llama-index-readers-web>=0.2.0",
    "langchain-community>=0.3.0",
    "streamlit>=1.50.0",
    "chromadb>=0.5.0",
    "openai>=1.12.0",
    "python-dotenv>=1.0.0",
    "tqdm>=4.66.0",
    "arize-phoenix>=4.0.0",
    "openinference-instrumentation-llama-index>=2.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "coverage>=7.3.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.21.0",
]
dev = [
    "debugpy>=1.8.0",
]

# ==================== PyTorch CUDA 配置 ====================
# 配置从 PyTorch 官方 CUDA 索引安装，确保使用 GPU 版本
# 注意：Windows 平台默认会从 PyPI 安装 CPU 版本
# 需要使用 uv pip install 手动安装 CUDA 版本

[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

# 注意：uv.lock 在 Windows 上默认锁定 CPU 版本
# 解决方案：安装 CUDA 版本后，使用 uv pip install 直接安装（不会被 uv sync 覆盖）
# 或者手动修改 uv.lock 中的 torch source 为 pytorch-cu121 索引
[tool.uv.sources]
# 注释：理论上这应该工作，但在 Windows 上 uv lock 仍可能选择 CPU 版本
# torch = { index = "pytorch-cu121" }
# torchvision = { index = "pytorch-cu121" }
# torchaudio = { index = "pytorch-cu121" }